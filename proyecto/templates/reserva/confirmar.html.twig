{% extends 'layout/base.html.twig' %}

{% block title %}Confirmar Reserva{% endblock %}

{% block content %}
<div class="container my-5">
    <div class="row g-4">
        <!-- Columna izquierda: Información de la Máquina -->
        <div class="col-md-6">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h1 class="card-title text-primary text-center fw-bold fs-2">Confirmar Reserva</h1>
                    <h2 class="text-primary text-center fw-semibold fs-4">{{ maquina.nombre }}</h2>
                    {% if maquina.imagenes is not empty %}
                        <img src="{{ asset('images/' ~ maquina.imagenes[0]) }}" alt="Imagen de la máquina" class="img-fluid rounded mb-3 d-block mx-auto" style="object-fit:cover; max-height:300px;">
                    {% else %}
                        <p class="text-muted">No hay imagen disponible.</p>
                    {% endif %}
                    <p><strong>Descripción:</strong> {{ maquina.descripcion }}</p>
                </div>
            </div>
        </div>

        <!-- Columna derecha: Datos de la Reserva y Opciones de Pago -->
        <div class="col-md-6">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h3 class="text-primary text-center fw-semibold fs-5 mb-3">Datos de la reserva</h3>
                    <p><strong>Fechas:</strong> {{ reserva.fechaInicio|date('d/m/Y') }} – {{ reserva.fechaFin|date('d/m/Y') }}</p>
                    <p><strong>Días:</strong> {{ reserva.fechaInicio.diff(reserva.fechaFin).days + 1 }}</p>

                    {% if recargoMontoDisplay > 0 %}
                        <p><strong>Costo base:</strong> ${{ (costoFinalDisplay - recargoMontoDisplay)|number_format(2, ',', '.') }}</p>
                        <p><strong>Recargo por valoración (cliente con {{ valoracionPromedio|number_format(1) }} estrellas):</strong> ${{ recargoMontoDisplay|number_format(2, ',', '.') }}</p>
                    {% else %}
                        <p><strong>Sin recargo por valoración (cliente con {{ valoracionPromedio|number_format(1) }} estrellas)</strong></p>
                    {% endif %}
                    <p id='cupon' hidden ><strong id='cuponText'>Sin recargo por valoración (cliente con {{ valoracionPromedio|number_format(1) }} estrellas)</strong></p>

                    <p >
                        <strong>Costo total:</strong>
                        <span id='total' class="fs-4 fw-bold text-danger">${{ costoFinalDisplay|number_format(2, ',', '.') }}</span>
                    </p>

                    <p id='R1'>Reembolso si cancelas antes del {{ reserva.fechaReembolsoPenalizado|date('d/m/Y') }} : ${{ reserva.montoReembolso|number_format(2, ',', '.') }}</p>
                    <p id='R2'>Reembolso si cancelas después del {{ reserva.fechaReembolsoPenalizado|date('d/m/Y') }} : ${{ reserva.reembolsoPenalizado|number_format(2, ',', '.') }}</p>
                    <div name='flash' id="flashMessage" class="flash-message" hidden> Sadnjsdfndsjfkdns</div>

                    {% if 'ROLE_EMPLEADO' in app.user.roles %}
                        <div hidden id="textoQR"class="text-center mt-4">
                            <p><strong>Escaneá este código QR para pagar:</strong></p>
                            <canvas id="qrcode"></canvas>
                        </div>
                        <form id="couponForm" class="mt-4">
                             <input type="text" name="codigo" id="codigo" class="form-control mb-2" placeholder="Código de cupón" required>
                             <button type="submit" class="btn btn-warning w-100 mb-2">Aplicar cupón</button>
                        </form>
                        <button id="generarQR"onClick=mostrarQR() class="btn btn-warning w-100 mb-2">Generar QR</button>
                    {% else %}
                        <form id="couponForm" class="mt-4">
                             <input type="text" name="codigo" id="codigo" class="form-control mb-2" placeholder="Código de cupón" required>
                             <button type="submit" class="btn btn-warning w-100 mb-2">Aplicar cupón</button>
                             <div id="walletBrick_container" class="mt-3"></div>
                        </form>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.0/build/qrcode.min.js"></script>
    <script src="https://sdk.mercadopago.com/js/v2"></script>

    <script>
        const publicKey = '{{ MERCADOPAGO_PUBLIC_KEY|default('APP_USR-a8939531-6298-4a18-8a19-820c941ab804') }}';
        const preferenceId = '{{ preferenceId|default('') }}';
        const qrData = "{{ qr_data|e('js') }}";

        if (publicKey && preferenceId) {
            const mp = new MercadoPago(publicKey, { locale: 'es-AR' });
            mp.bricks().create("wallet", "walletBrick_container", {
                initialization: { preferenceId: preferenceId },
                callbacks: {
                    onSubmit: () => {
                        salidaForzada = false;
                        return Promise.resolve();
                    },
                    onReady: () => { console.log('Wallet Brick listo para usar.'); },
                    onError: (error) => {
                        console.error('Error al inicializar Wallet Brick:', error);
                        const container = document.getElementById('walletBrick_container');
                        if (container) {
                            container.innerHTML = '<p class="text-danger">No se pudo cargar el método de pago. Inténtalo de nuevo más tarde.</p>';
                        }
                    }
                }
            });
        } else {
            console.error("Error: No se pudo cargar Mercado Pago. Falta la Public Key o el Preference ID.");
            const container = document.getElementById('walletBrick_container');
            if (container) {
                container.innerHTML = '<p class="text-danger">No se pudo cargar el método de pago. Por favor, asegúrate de que las claves de Mercado Pago estén configuradas correctamente.</p>';
            }
        }

        let salidaForzada = true;
        window.addEventListener('beforeunload', (e) => {
            if (salidaForzada) {
                navigator.sendBeacon('/reserva/eliminar/{{reserva.id}}');
            }
        });

        document.getElementById('couponForm')?.addEventListener('submit', function (e) {
            e.preventDefault();
            const codigo = document.getElementById('codigo').value;

            fetch('/aplicar-cupon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ codigo, id: {{ reserva.id }} })
            })
            .then(res => res.json())
            .then(data => {
                salidaForzada=false;
                
                
                console.log(data);
                mostrarFlash(data.mensaje, 'flashExito');
                if (bool) {
                    window.location.href = window.location.href;
                }
            })
            .catch(err => {
                console.error(err);
                mostrarFlash('Error al aplicar cupón', 'flashError');
            });
        });

        function mostrarFlash(mensaje, tipo) {
            const aa = document.getElementsByName('flash')[0];
            aa.textContent = mensaje;
            aa.id = tipo;
            bool = true;
            if (mensaje === 'Código inválido') {
                aa.id = 'flashError';
                bool = false;
            }
            aa.removeAttribute('hidden');
            setTimeout(() => aa.setAttribute('hidden', ''), 4000);
            return bool;
        }


        function mostrarQR() {
            const qrTexto = document.getElementById('textoQR');
            const qrBoton = document.getElementById('generarQR');
            setTimeout(function() {
            qrTexto.removeAttribute("hidden");         
            qrBoton.setAttribute("hidden", "");
            }, 1000)
            
        }

        // Generar QR si el usuario es empleado y qrData existe
        if (qrData && qrData !== "null" && qrData !== "") {
            const canvas = document.getElementById('qrcode');
            if (canvas) {
                QRCode.toCanvas(canvas, qrData, {
                    width: 256,
                    margin: 1,
                    color: {
                        dark: '#000000',
                        light: '#ffffff'
                    }
                }, function (error) {
                    if (error) {
                        console.error('Error generando QR:', error);
                    } else {
                        console.log('QR generado correctamente.');
                    }
                });
            }
        }
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .flash-message {
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 16px;
            font-weight: bold;
            font-size: 15px;
            transition: opacity 0.4s ease, transform 0.4s ease;
            opacity: 1;
            transform: translateY(0);
        }

        #flashExito {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        #flashError {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
{% endblock %}